import json
from dotenv import load_dotenv
from collections import defaultdict
from time import sleep
import threading

## undocumented api call
from PeekFriends import PeekFriends

#### imports for spotify public api
import spotipy
from spotipy.oauth2 import SpotifyOAuth
# loading secrets
from dotenv import load_dotenv
import os

load_dotenv('.env.documented')
client_secret = os.getenv('CLIENT_SECRET')
redirect_uri = os.getenv('REDIRECT_URI')


### globals
recs = []
recartist = []
source = []
uris = []
favs = defaultdict(list)


## using Spotify Api
class Load():
    def __init__(self):
        pass

    ## returns your top artists in the short term on spotify
    def getTopArtists(self):
        top_artists = set()
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_secret=client_secret, redirect_uri=redirect_uri, scope='user-top-read'))
        results = sp.current_user_top_artists(time_range="short_term", limit=50)
        for item in results['items']:
            top_artists.add(item['name'])
        return top_artists

    ## uses your top_artists to make a dictionary of the songs you like from them
    def getTopArtistsLikedSongs(self, top_artists):
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_secret=client_secret, redirect_uri=redirect_uri, scope='user-library-read'))
        maxSongs = 500
        numSongsChecked = 0
        size = 50
        while numSongsChecked < maxSongs: 
            results = sp.current_user_saved_tracks(limit=size, offset=numSongsChecked)
            for item in results["items"]:
                # use all the artists for the comparison
                for artist in item["track"]["artists"]:
                    if artist["name"] in top_artists:
                        string = "".join(item["track"]["name"])
                        favs[artist["name"]].append(string)
                        break
            numSongsChecked+=size

    ## populates the favs dictionary with artists and top songs
    def update(self):
        top_artists = self.getTopArtists()
        self.getTopArtistsLikedSongs(top_artists)

## writes your recs to file (they are globals)
def writeToRecs():
    with open('recs.json', 'r') as f:
        data = json.load(f)
    data["recs"] += recs
    data["recartist"] += recartist
    data["source"] += source
    with open('recs.json', 'w') as f:
        json.dump(data, f, indent=4)
    return True

def saveRecsToPlaylist():
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_secret=client_secret, redirect_uri=redirect_uri, scope='playlist-modify-public'))
    # get playlist id from settings or create a new playlist
    playlistId = None
    with open('settings.json', 'r') as f:
        data = json.load(f)
        playlistId = data["playlist_id"]
    if playlistId == "":
        playlistName = "Friend Recs"
        playlistDescription = "A playlist of songs recommended by your friends. Generated by Spotif-eyes, https://github.com/ling1984/spotif-eyes."
        playlist = sp.user_playlist_create(user=sp.current_user()["id"], name=playlistName, public=True, description=playlistDescription)
        playlistId = playlist["id"] 

        # write playlist id to settings
        with open('settings.json', 'w') as f:
            data["playlist_id"] = playlistId
            json.dump(data, f, indent=4)

    # add recs to playlist
    if uris:
        sp.playlist_add_items(playlist_id=playlistId,items=uris, position=0)
        print("Recs saved to playlist.\n")
    else:
        print("Nothing to save :(")

# background process
def listenerProcess(peaky, cycleLength):
    global running
    while running:
        for i in range(cycleLength):
            if not running:
                print("Listener stopped.")
                return
            sleep(1)
        ## checked every second for cycleLength
        ## end of the cycle we use listening to friends
        try:
            friends = peaky.getFriendSongList()
            # [friendname, songname, artistname, uri]
            fri, son, art, uri = 0, 1, 2, 3
            for friend in friends:
                if (friend[art] in favs) and (friend[son] not in recs):
                    recs.append(friend[son])
                    recartist.append(friend[art])
                    source.append(friend[fri])
                    uris.append(friend[uri])
                    print("\nFound a rec\n> ")
        except Exception as e:
            print(f"Exception occurred: {e}")
            continue


def main():
    print("Starting Spotif-eyes...")

    l = Load()
    l.update()
    print("Loaded your top artists and favourite songs.\n")

    peaky = PeekFriends()
    global running
    running = False
    listener = threading.Thread(target=listenerProcess, args=(peaky, 30))

    print('Enter "start" to start the listening')
    while True:
        usin = input("> ")
        match usin:
            case "start":
                if not running:
                    running = True
                    listener.start()
                    print("Now listening to your friends...")
                else:
                    print("Already running.")
            case "stop":
                if running:
                    running = False
                    listener.join()
                    print("You have ", len(recs), " new recommendations.")
                else:
                    print("Not started, nothing to stop.")
            case "status":
                print("Printing what your mates are listening to...")
                print(peaky.getFriendSongList())
            case "recs":
                print("Printing your recs...")
                for song, artist, friend in zip(recs, recartist, source):
                    print(song, "- ", artist, " from ", friend)
            case "save":
                print("saves your recs to your Friend Recs playlist")
                saveRecsToPlaylist()
            case "exit":
                if running:
                    print("Stopping listener...")
                    running = False
                    listener.join()                
                print("Saving your recs to your Friend Recs playlist...")
                sleep(0.1)
                saveRecsToPlaylist()
                sleep(1)
                exit()
            case _:
                print("unknown input")
main()
